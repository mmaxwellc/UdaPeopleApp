version: 2.1

commands:

   destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevelopmentTeam'
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     mentions: '@DevelopmentTeam'
      #     template: basic_success_1 

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevelopmentTeam'
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     mentions: '@DevelopmentTeam'
      #     template: basic_success_1 
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevelopmentTeam'
      #     template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  mentions: '@DevelopmentTeam'
        #  template: basic_success_1 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevelopmentTeam'
      #     template: basic_fail_1
      #- slack/notify:
       #   event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevelopmentTeam'
      #     template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  mentions: '@DevelopmentTeam'
        #  template: basic_success_1 
      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevelopmentTeam'
      #     template: basic_fail_1
      #- slack/notify:
         # event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1    

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"                
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text )
            echo ${BACKEND_IP}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevOpsTeam'
      #     template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "30:6b:56:37:be:1c:f5:b0:75:59:ff:19:e9:ac:68:ba"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies(AWSCLI AND ANSIBLE)
          command: |
            sudo apt update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install          
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y                  
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # - slack/notify:
      #     event: fail
      #     mentions: '@DevOpsTeam'
      #     template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  mentions: '@DevOpsTeam'
         # template: basic_success_1 
      - destroy-environment       

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, scan-frontend, test-backend,scan-backend]
          filters:
            branches:
              only: [master]